#pragma once

#include "Plexon.h"
#include <vector>
#include <map>

#define MAX_MAP_EVENTS_PER_READ 500000
#define MAX_SPIKE_CHANNEL_NUMBER 64
#define MAX_TRIGGER_CHANNEL_NUMBER 8
typedef struct BatchStatType {
    std::vector<unsigned int > val; 
    BatchStatType() {
        val.resize(MAX_SPIKE_CHANNEL_NUMBER + MAX_TRIGGER_CHANNEL_NUMBER, 0);
    }
} BatchStatType;

struct SampleDataType {
    unsigned long TimeStamp;
    short Unit;
    short Channel;
    SampleDataType() : TimeStamp(0), Unit(-1), Channel(-1) {}
    SampleDataType(unsigned long _TimeStamp, short _Unit, short _Channel) 
        : TimeStamp(_TimeStamp), Unit(_Unit), Channel(_Channel) {}
};

class PlexonData {
public:
    PlexonData(CDialogEx *parent);
    ~PlexonData(void);

    bool Init();
    bool ConnectDataServer();
    inline void SetWindowSize(int ms);
    void SetupInitBatchNumber();
    inline void ClearData();
    int SaveData(const std::string &mat_filename, int neuron_channel_start, int neuron_channel_number, int motion_channel_start, int motion_channel_number);
    void Train(const std::string &data_filename, int num_epo, int workmode);
    bool Test(const std::string &model_filename, int neuron_channel_start, int neuron_channel_number, int motion_channel_number, int num_epo, std::vector<double> &res);
    int ReadSpike();
	inline int GetSampleRate() const { return mapSampleRate;}


    std::vector<std::vector<SampleDataType> > sampleDataBatch;
    std::vector<BatchStatType> sampleDataStatistics;

protected:
    CDialogEx *mainWindow;
    PL_Event *pServerEventBuffer;

    int windowSizeInMs;  // in millisecond
    int windowSizeInTimeStamp; // in timeStamp. time_in_second = TimeStamps / SampleRate
    int mapSampleRate;
    int initalBatchNumber;
};

inline void PlexonData::SetWindowSize(int ms) {
    windowSizeInMs = ms;
}

inline void PlexonData::ClearData() {
    sampleDataBatch.clear();
    sampleDataStatistics.clear();
}
